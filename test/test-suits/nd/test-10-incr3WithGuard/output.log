0: proc(load, L10, 0). proc(load, L10, 0). proc(load, L10, 0). L10 -> 0. 
1: proc(load, L10, 0). proc(load, L10, 0). proc(incr, L10, 0). L10 -> 0. 
2: proc(load, L10, 0). proc(incr, L10, 0). proc(incr, L10, 0). L10 -> 0. 
3: proc(load, L10, 0). proc(load, L10, 0). proc(store, L10, 1). L10 -> 0. 
4: proc(incr, L10, 0). proc(incr, L10, 0). proc(incr, L10, 0). L10 -> 0. 
5: proc(load, L10, 0). proc(incr, L10, 0). proc(store, L10, 1). L10 -> 0. 
6: proc(incr, L10, 0). proc(incr, L10, 0). proc(store, L10, 1). L10 -> 0. 
7: proc(incr, L10, 0). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
8: proc(incr, L10, 0). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
9: proc(store, L10, 1). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
10: proc(incr, L10, 0). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
11: proc(store, L10, 1). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
12: proc(store, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
13: proc(halt, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
14: proc(incr, L10, 0). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
15: proc(load, L10, 0). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
16: proc(load, L10, 0). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
17: proc(load, L10, 0). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
18: proc(incr, L10, 1). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
19: proc(load, L10, 0). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
20: proc(store, L10, 2). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
21: proc(incr, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
22: proc(store, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
23: proc(halt, L10, 2). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 2. 
24: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 2. 
25: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
26: proc(incr, L10, 1). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
27: proc(store, L10, 2). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
28: proc(halt, L10, 2). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 2. 
29: proc(load, L10, 0). proc(load, L10, 0). proc(halt, L10, 1). L10 -> 1. 
30: proc(load, L10, 0). proc(incr, L10, 1). proc(halt, L10, 1). L10 -> 1. 
31: proc(incr, L10, 1). proc(incr, L10, 1). proc(halt, L10, 1). L10 -> 1. 
32: proc(load, L10, 0). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
33: proc(incr, L10, 1). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
34: proc(store, L10, 2). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
35: proc(incr, L10, 1). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
36: proc(store, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
37: proc(halt, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
38: proc(load, L10, 0). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
39: proc(incr, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
40: proc(store, L10, 3). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
41: proc(halt, L10, 3). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 3. 

State(s):
0: proc(load, L10, 0). proc(load, L10, 0). proc(load, L10, 0). L10 -> 0. 
1: proc(load, L10, 0). proc(load, L10, 0). proc(incr, L10, 0). L10 -> 0. 
2: proc(load, L10, 0). proc(incr, L10, 0). proc(incr, L10, 0). L10 -> 0. 
3: proc(load, L10, 0). proc(load, L10, 0). proc(store, L10, 1). L10 -> 0. 
4: proc(incr, L10, 0). proc(incr, L10, 0). proc(incr, L10, 0). L10 -> 0. 
5: proc(load, L10, 0). proc(incr, L10, 0). proc(store, L10, 1). L10 -> 0. 
6: proc(incr, L10, 0). proc(incr, L10, 0). proc(store, L10, 1). L10 -> 0. 
7: proc(incr, L10, 0). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
8: proc(incr, L10, 0). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
9: proc(store, L10, 1). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
10: proc(incr, L10, 0). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
11: proc(store, L10, 1). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
12: proc(store, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
13: proc(halt, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
14: proc(incr, L10, 0). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
15: proc(load, L10, 0). proc(store, L10, 1). proc(store, L10, 1). L10 -> 0. 
16: proc(load, L10, 0). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
17: proc(load, L10, 0). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
18: proc(incr, L10, 1). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
19: proc(load, L10, 0). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
20: proc(store, L10, 2). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 1. 
21: proc(incr, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
22: proc(store, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
23: proc(halt, L10, 2). proc(store, L10, 1). proc(halt, L10, 1). L10 -> 2. 
24: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 2. 
25: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
26: proc(incr, L10, 1). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
27: proc(store, L10, 2). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 1. 
28: proc(halt, L10, 2). proc(incr, L10, 0). proc(halt, L10, 1). L10 -> 2. 
29: proc(load, L10, 0). proc(load, L10, 0). proc(halt, L10, 1). L10 -> 1. 
30: proc(load, L10, 0). proc(incr, L10, 1). proc(halt, L10, 1). L10 -> 1. 
31: proc(incr, L10, 1). proc(incr, L10, 1). proc(halt, L10, 1). L10 -> 1. 
32: proc(load, L10, 0). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
33: proc(incr, L10, 1). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
34: proc(store, L10, 2). proc(store, L10, 2). proc(halt, L10, 1). L10 -> 1. 
35: proc(incr, L10, 1). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
36: proc(store, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
37: proc(halt, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
38: proc(load, L10, 0). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
39: proc(incr, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
40: proc(store, L10, 3). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
41: proc(halt, L10, 3). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 3. 

Terminal state(s):
13: proc(halt, L10, 1). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
24: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 2. 
25: proc(halt, L10, 2). proc(halt, L10, 1). proc(halt, L10, 1). L10 -> 1. 
37: proc(halt, L10, 2). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 2. 
41: proc(halt, L10, 3). proc(halt, L10, 2). proc(halt, L10, 1). L10 -> 3. 

Transiton(s):
0 ~> 1 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
1 ~> 2 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
1 ~> 3 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
2 ~> 4 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
2 ~> 5 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
4 ~> 6 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
6 ~> 7 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
6 ~> 8 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
7 ~> 9 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
7 ~> 10 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
9 ~> 11 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
11 ~> 12 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
12 ~> 13 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
10 ~> 11 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
10 ~> 14 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
14 ~> 12 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
8 ~> 10 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
5 ~> 6 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
5 ~> 15 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
5 ~> 16 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
15 ~> 7 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
15 ~> 17 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
17 ~> 18 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
17 ~> 19 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
18 ~> 20 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
18 ~> 21 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
20 ~> 22 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
20 ~> 23 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
22 ~> 24 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
23 ~> 25 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
21 ~> 22 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
19 ~> 21 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
16 ~> 26 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
16 ~> 17 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
26 ~> 18 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
26 ~> 27 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
27 ~> 20 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
27 ~> 28 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
28 ~> 23 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
3 ~> 5 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
3 ~> 29 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
29 ~> 30 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
30 ~> 31 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
30 ~> 32 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
31 ~> 33 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
33 ~> 34 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
33 ~> 35 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
34 ~> 36 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
36 ~> 37 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
35 ~> 36 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
32 ~> 33 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
32 ~> 38 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".
38 ~> 39 with a rule "proc(load, X, $y:int), X -> $x:int :- proc(incr, X, $x), X -> $x".
39 ~> 40 with a rule "proc(incr, X, $y:int) :- ':='($y', '+'($y, 1)) | proc(store, X, $y')".
40 ~> 41 with a rule "proc(store, X, $y:int), X -> $x:int :- proc(halt, X, $y), X -> $y".

'# of States'(stored)  = 42.
'# of States'(end)     = 5.
'# of Transitions'     = 55.
